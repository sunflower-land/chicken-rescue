/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type SessionChanged = ContractEventLog<{
  owner: string;
  sessionId: string;
  farmId: string;
  0: string;
  1: string;
  2: string;
}>;

export interface SunflowerLandGame extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions,
  ): SunflowerLandGame;
  clone(): SunflowerLandGame;
  methods: {
    addGameRole(_game: string): NonPayableTransactionObject<void>;

    bumpkinWearables(): NonPayableTransactionObject<string>;

    deposit(): PayableTransactionObject<void>;

    destroy(): PayableTransactionObject<void>;

    executed(arg0: string | number[]): NonPayableTransactionObject<boolean>;

    farm(): NonPayableTransactionObject<string>;

    gameAddGameRole(_game: string): NonPayableTransactionObject<void>;

    gameRemoveGameRole(_game: string): NonPayableTransactionObject<void>;

    gameRoles(arg0: string): NonPayableTransactionObject<boolean>;

    getMaxItemAmounts(
      _ids: (number | string | BN)[],
    ): NonPayableTransactionObject<string[]>;

    inventory(): NonPayableTransactionObject<string>;

    mintAllowance(): NonPayableTransactionObject<string>;

    mintedAmount(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    removeGameRole(_game: string): NonPayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    session(): NonPayableTransactionObject<string>;

    sessions(arg0: number | string | BN): NonPayableTransactionObject<string>;

    setMaxItemAmounts(
      _ids: (number | string | BN)[],
      _amounts: (number | string | BN)[],
    ): NonPayableTransactionObject<void>;

    setMaxSessionSFL(
      _amount: number | string | BN,
    ): NonPayableTransactionObject<void>;

    setMaxWearableAmounts(
      _ids: (number | string | BN)[],
      _amounts: (number | string | BN)[],
    ): NonPayableTransactionObject<void>;

    setMintAllowance(
      _amount: number | string | BN,
    ): NonPayableTransactionObject<void>;

    syncProgress(data: {
      signature: string | number[];
      farmId: number | string | BN;
      deadline: number | string | BN;
      sessionId: string | number[];
      nextSessionId: string | number[];
      fee: number | string | BN;
      progress: {
        mintIds: (number | string | BN)[];
        mintAmounts: (number | string | BN)[];
        burnIds: (number | string | BN)[];
        burnAmounts: (number | string | BN)[];
        wearableIds: (number | string | BN)[];
        wearableAmounts: (number | string | BN)[];
        wearableBurnIds: (number | string | BN)[];
        wearableBurnAmounts: (number | string | BN)[];
        tokens: number | string | BN;
      };
    }): PayableTransactionObject<boolean>;

    syncedAt(arg0: number | string | BN): NonPayableTransactionObject<string>;

    token(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    transferSigner(_signer: string): NonPayableTransactionObject<void>;

    transferSyncFeeWallet(_team: string): NonPayableTransactionObject<void>;
  };
  events: {
    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>,
    ): EventEmitter;

    SessionChanged(cb?: Callback<SessionChanged>): EventEmitter;
    SessionChanged(
      options?: EventOptions,
      cb?: Callback<SessionChanged>,
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>,
  ): void;

  once(event: "SessionChanged", cb: Callback<SessionChanged>): void;
  once(
    event: "SessionChanged",
    options: EventOptions,
    cb: Callback<SessionChanged>,
  ): void;
}
